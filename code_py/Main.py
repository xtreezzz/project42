from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, RegexHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, ParseMode
import logging
from datetime import datetime
import telegram
import os
import csv
import sys
from code_py.model import Gamer, db_session
from sqlalchemy import exists, and_
import re

sys.path.append(os.path.abspath(__file__))
log_dir_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
os.makedirs(log_dir_path, exist_ok=True)
logging.basicConfig(format='%(name)s - %(levelname)s - %(message)s',
                    level=logging.DEBUG,
                    filename=f"logs/bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"

                    )
logging.getLogger().addHandler(logging.StreamHandler())

PROXY = {'proxy_url': 'socks5://t1.learn.python.ru:1080',
         'urllib3_proxy_kwargs': {'username': 'learn', 'password': 'python'}}


def greet_user(bot, update):
    text = '–í—ã–∑–≤–∞–Ω /start'
    print(text)
    chat_id = update.message.chat_id
    # msg_date = update.message.date
    user = update.message.from_user
    user_exist_flag = db_session.query(exists().where(and_(Gamer.first_name == user.first_name, Gamer.last_name == user.last_name,
                                               Gamer.chat_id == chat_id))).scalar()
    if user_exist_flag:
        flag = '–°—Ç–∞—Ä–∏—á–æ–∫'
    else:
        user = Gamer(first_name=user.first_name, last_name=user.last_name, chat_id=chat_id, nick_name=user.username)
        db_session.add(user)
        db_session.commit()
        flag = '–ù–æ–≤–∏—á–æ–∫'



    update.message.reply_text(f"{flag}, {user.last_name} {user.first_name} <3", reply_markup=user_keyboard())


def send_quiz_message(bot, update):
    # TODO –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ö–∞—Ä–¥–∫–æ–¥–∞ –∏ –∑–∞–±–∏—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ –±–∞–∑—ã
    global today_command_list
    today_command_list = [153799581, 510364397]
    user_text = update.message.text
    input_list = update.message.text.split('send')[1].strip()
    print(input_list, today_command_list)

    for id in today_command_list:
        bot.sendMessage(chat_id=id, text="Stay here, I'll be back.")

#TODO —Å–æ–∑–¥–∞—Ç—å keyboard.py
def user_keyboard():
    # –¥–≤–æ–π–Ω–æ–π —Ä—è–¥ —Ç–æ–ª—å–∫–æ
    _user_keyboard = ReplyKeyboardMarkup([
        ['*–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—èüôà', '*–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É']
        , ['*–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã', '*–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É']
        , ['–ö–∞–ø–∏—Ç–∞–Ω—Å–∫–∏–π –º–æ—Å—Ç–∏–∫']
        , ['*–ü–æ–π—Ç–∏ –Ω–∞ –∏–≥—Ä—É']
        , ['*–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º', '*–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', '–ê–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ', '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤']
        , ['*Check in', '*–ö–æ–Ω–∫—É—Ä—Å –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º', '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ']
    ], resize_keyboard=True)
    print('olol')
    return _user_keyboard


def team_keyboard():
    _team_keyboard = ReplyKeyboardMarkup([
        ['–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É', '*–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É', '*–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤']
        , ['*–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—É', '*–°–º–µ–Ω–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞', '*–ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤']
        , ['*–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É']
    ], resize_keyboard=True)
    return _team_keyboard


def game_team_keyboard():
    _game_team_keyboard = ReplyKeyboardMarkup([
        ['*Check in –∫–æ–º–∞–Ω–¥—É', '*Check in —á–µ–ª–æ–≤–µ–∫–∞', '*–°–º–µ–Ω–∏—Ç—å –∫–∞–ø–∏—Ç–∞–Ω–∞']
        , ['*–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã']
        , ['*–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã']

    ], resize_keyboard=True)
    return _game_team_keyboard


def game_stat():
    # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    pass


def chat_listener(bot, update):
    user_text = update.message.text
    user = update.message.from_user

    # if user.id == ADMIN_ID:
    #     update.message.reply_text('Welcome Master')
    # else:
    #     update.message.reply_text(f'Welcome HALOP your text{user_text}')

#TODO —Å–æ–∑–¥–∞—Ç—å flow.py
def team_reg(bot, update, user_data):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã", reply_markup=ReplyKeyboardRemove())
    return "name"


def team_menu_func(bot, update, user_data):
    update.message.reply_text(f"–ö–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é", reply_markup=team_keyboard())


def team_get_name(bot, update, user_data):
    team_name = update.message.text
    if team_name == 'Ris':
        update.message.reply_text('–ö–∏—Å –ø–æ –±—Ä–∞—Ç—Å–∫–∏')
        return "name"
    else:
        user_data['team_name'] = team_name
        update.message.reply_text("""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≥–∞–Ω –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã 
–∏–ª–∏ /skip""")
        return "slogan"


def team_slogan(bot, update, user_data):
    user_data['slogan'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    return 'phone'


def team_slogan_skip(bot, update, user_data):
    user_data['slogan'] = ''
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    return 'phone'


def team_slogan_sticker(bot, update, user_data):
    user_data['slogan'] = update.message.sticker.file_id
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    return 'phone'


def team_get_phone(bot, update, user_data):
    phone = update.message.text
    #TODO –Ω–∞–π—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π regexp
    if re.match(r'^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$', phone):
        user_data['team_phone'] = phone
        update.message.reply_text("""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ email 
–∏–ª–∏ /skip""")
        return "email"
    else:
        update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞ –Ω–µ {phone}")
        return 'phone'


def team_get_email(bot, update, user_data):
    email = update.message.text
    if re.match(r'(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)', email):
        user_data['email'] = email
        update.message.reply_text(f"–í—ã –∑–∞—Ä–µ–≥–∞–Ω—ã {user_data}", reply_markup=user_keyboard())
        return ConversationHandler.END
    else:
        update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email, –∞ –Ω–µ {email}")
        return 'email'


def team_get_email_skip(bot, update, user_data):
    user_data['email'] = update.message.text
    update.message.reply_text(f"–í—ã –∑–∞—Ä–µ–≥–∞–Ω—ã {user_data}", reply_markup=user_keyboard())
    return ConversationHandler.END


def dontknow(bot, update, user_data):
    bot.send_sticker(chat_id=update.message.chat_id, sticker='CAADAgADIgADCA1lDqlm6Zo7g-xqAg')


def main():
    #TODO —É–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥
    mybot = Updater('–•–•–•–•–•–•', request_kwargs=PROXY)
    # —Ñ–∏–ª—å—Ç—Ä—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏
    dp = mybot.dispatcher
    team_menu = ConversationHandler(
        entry_points=[RegexHandler('^(–ö–∞–ø–∏—Ç–∞–Ω—Å–∫–∏–π –º–æ—Å—Ç–∏–∫)$', team_menu_func, pass_user_data=True)],
        states={},
        fallbacks=[]
    )
    team_menu_reg = ConversationHandler(
        entry_points=[RegexHandler('^(–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É)$', team_reg, pass_user_data=True)],
        states={
            "name": [MessageHandler(Filters.text, team_get_name, pass_user_data=True)],
            "slogan": [MessageHandler(Filters.text, team_slogan, pass_user_data=True),
                       MessageHandler(Filters.sticker, team_slogan_sticker, pass_user_data=True),
                       CommandHandler('skip', team_slogan_skip, pass_user_data=True)],
            "phone": [MessageHandler(Filters.text, team_get_phone, pass_user_data=True)],
            "email": [MessageHandler(Filters.text, team_get_email, pass_user_data=True),
                      CommandHandler('skip', team_get_email_skip, pass_user_data=True)]

        },
        #TODO –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å
        fallbacks=[MessageHandler(Filters.sticker, dontknow, pass_user_data=True)]
    )
    dp.add_handler(CommandHandler("start", greet_user))
    dp.add_handler(team_menu)
    dp.add_handler(team_menu_reg)
    dp.add_handler(CommandHandler("send", send_quiz_message))
    dp.add_handler(MessageHandler(Filters.text, chat_listener))
    mybot.start_polling()
    mybot.idle()


main()
